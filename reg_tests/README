---------------------------------------------------------------
HOW TO RUN THE REGRESSION TEST SUITE
---------------------------------------------------------------

The regression test suite consists of eight fortran programs
that invoke a subset of IPOLATES (or IPLIB) routines.  IPOLATES
developers are required to run this test suite to ensure their
branch changes perform as expected before they are merged to 
the trunk.

The following steps are required to setup and run the test suite:

(1) Compile the 'test' and 'control' IPOLATES libraries.

   The suite tests all three versions of IPOLATES:

   -4 byte integer/4 byte float 
   -4 byte integer/8 byte float 
   -8 byte integer/8 byte float 

   The 'test' libraries are your branch copies, while 
   the 'control' libaries are the head of the trunk.

(2) Link the 'test' and 'control' libraries to the
    ./reg_tests/lib directory in your branch.  

    Example:

    cd ./reg_tests/lib

    ln -s /trunk/ip_v${version}_4/libip_v${version}_4.a  libip_ctl_4.a  (4 byte integer/4 byte float, control)
    ln -s /trunk/ip_v${version}_8/libip_v${version}_8.a  libip_ctl_8.a  (8 byte integer/8 byte float, control)
    ln -s /trunk/ip_v${version}_d/libip_v${version}_d.a  libip_ctl_d.a  (4 byte integer/8 byte float, control)
    ln -s /branch/ip_v${version}_4/libip_v${version}_4.a  libip_test_4.a  (4 byte integer/4 byte float, test)
    ln -s /branch/ip_v${version}_8/libip_v${version}_8.a  libip_test_8.a  (8 byte integer/8 byte float, test)
    ln -s /branch/ip_v${version}_d/libip_v${version}_d.a  libip_test_d.a  (4 byte integer/8 byte float, test)

(3) Check the ./reg_tests/config-setup/ifort.setup file in your branch.

    This file contains the compiler, compiler flags, link flags
    and version numbers of the SP, W3NCO and BACIO libraries.
    Currently, the regression suite has only been tested with the
    "ifort" compiler.  The settings in this file work for WCOSS.
    On Zeus, the SP, W3CNO and BACIO libaries are located in:
    /contrib/nceplibs/nwprod/lib.  So the LDFLAGS line should
    be set as follows:

    export LDFLAGS="-openmp -L${PWD}/lib -L/contrib/nceplibs/nwprod/lib"

    All other entries should be the same for WCOSS and Zeus.

(4) Build the regression tests suite.

    From ./reg_tests type "make_reg_tests.ksh"

    Log output from the 'ctl' and 'test' builds will be in the
    config*log files.  There will be six executables for
    each individual regression test (one for each 'ctl' and 'test' library version).
    These executables will be located in the ./exec sub-directory for
    the regression test.  The source code is in the ./src sub-directory.

(5) Kickoff the regression test suite.

    There are driver scripts for WCOSS, Zeus and CCS located in
    ./reg_tests.  The CCS script is no longer used.  

    To start the tests on WCOSS or Zeus, simply type the script name.
   
    A series of "daisy-chained" jobs steps will be submitted.  On
    WCOSS, the queue may be checked by typing:  "bjobs".  On
    Zeus, the command is: "showq -n -v -u USERNAME"
    
(6) Check results.

    On WCOSS, the default run directory is /stmp/${LOGNAME}/regression
    On Zeus, the default run directory is /scratch2/portfolios/NCEPDEV/stmp/$LOGNAME/regression
    (variable $WORK_DIR in the driver script).

    Log output from the test suite will be in "regression.log"  To monitor as
    the suite is running, do: grep ">>>" regression.log
    
    Once the suite is complete, a summary is placed in "summary.log"   Any failures
    should be investigated.

---------------------------------------------------------------
DETAILS ON EACH INDIVIDUAL REGRESSION TEST
---------------------------------------------------------------

The tests in the following subdirectories are designed to test 
a subset of IPLIB.  It was too difficult to create a single test
that exercised every routine.  

1)  gausslat - A fortran program that calls routine gausslat 
    to calculate the gaussian latitudes for a t382 grid.
2)  gdswiz_wzd - A fortran program that calls gdswiz and gdswzd
    (and all of their child routines) to calculate lat/lon and
    other map-related fields for several grids of
    of various map projections.
3)  ipolates - A fortran program that interpolates a global
    lat/lon grid of substrate temperature to several grids of various
    projections using the ipolates suite of routines.  All
    interpolation options (bilinear, neighbor, etc.) are used.
4)  ipolatev - A fortran program that interpolates a global
    lat/lon grid of vector u/v wind to several grids of various
    projections using the ipolatev suite of routines.  All
    interpolation options (bilinear, neighbor, etc.) are used.
5)  ipxetas - A fortran program that reads a field of
    vegetation greenness on an unstaggered eta grid, then 
    calls routine ipxetas to do the following transforms:
      1) Create a staggered mass grid from the unstaggered grid.
      2) Create a staggered velocity grid from the unstaggered grid.
      3) Create an unstaggered grid from the staggered mass grid created by step (1)
      4) Create an unstaggered grid from the staggered vel grid created by step (2)
6)  ipxwafs2_3 - Test ip routines ipxwafs2 and ipxwafs3 by transforming
    a global grid of 600 mb temperature (on ncep grid 3) to wafs grids 37 thru 44 
    using copygb. After the global to wafs grid transforms are
    completed, copygb is invoked again to transform temperature data on each
    wafs grid back to ncep grid 3.  Note: routine ipxwafs2 is invoked 
    for interpolation option '0' (bilinear) and routine ipxwafs3 
    is invoked for interpolation option '2' (neighbor).
7)  ipxwafs - Same as experiment 9 except a specially modified version
    of copygb is used to call iplib routine ipxwafs instead of ipxwafs2. 
    ipxwafs and ipxwafs2 are the same except the latter accounts for bitmaps.
8)  makgds - A fortran program to test routine makgds.  Routine is called
    three times.
      1) Create gds and kgds arrays for ncep grid 3. these arrays hold grid
         description information used by w3 grib library.
      2) Make kgds array for grid 3 from gds array
      3) Make gds array for grid 3 from kgds array
9)  copygb - The ncep copygb program is used to transform a global lat/lon file of
    vegetation greenness to numerous standard ncep grids using all available
    interpolation options (bilinear, nearest neighbor, etc.).  Because this 
    test can take over an hour of wall clock time, and calls the same
    routines as other regression tests, it is not currently called
    from the regression driver scripts.  However, it may be run stand-alone.
    Note: The copygb executables are used by the ixpwafs2_3 regresion test.

Within each regression directory, the ./src subdirectory will contain the
source code and make-related files required for the regression test. A script
to run the individual regression test is under the ./scripts subdirectory.
The executables (after compilation) are stored under the ./exec subdirectory.
Any input data is stored in the ./data subdirectory.  Grads control files
to view any binary output data are stored in the ./grads subdirectory.  Some control
files do not have map backgrounds specified.  They are only used to
sanity check the data.  So when viewing, do a 'set mproj off'. 

More detailed information about each test is described in a README file in that
test's subdirectory.

Below is a table of each routine in iplib and which regression test(s) invoke it.

subroutine name         regression test
===============         ===============

gausslat                gausslat
gdswiz                  gdswiz_wzd, ipolates, ipolatev, ipxwafs, ipxwafs2_3, copygb
gdswiz00                gdswiz_wzd, ipolates, ipolatev, ipxwafs, ipxwafs2_3, copygb
gdswiz01                gdswiz_wzd, ipolates, ipolatev, copygb
gdswiz03                gdswiz_wzd, ipolates, ipolatev, copygb
gdswiz04                gdswiz_wzd, ipolates, ipolatev, copygb
gdswiz05                gdswiz_wzd, ipolates, ipolatev, copygb
gdswizc9                gdswiz_wzd
gdswizca                gdswiz_wzd
gdswizcb                gdswiz_wzd, ipolates, ipolatev, copygb
gdswizcd                gdswiz_wzd, ipolates, ipolatev, copygb
gdswzd                  gdswiz_wzd
gdswzd00                gdswiz_wzd
gdswzd01                gdswiz_wzd
gdswzd03                gdswiz_wzd
gdswzd04                gdswiz_wzd
gdswzd05                gdswiz_wzd
gdswzdc9                gdswiz_wzd
gdswzdca                gdswiz_wzd
gdswzdcb                gdswiz_wzd
gdswzdcd                gdswiz_wzd
ijkgds0                 ipolates, ipolatev, ipxwafs, ipxwafs2_3, copygb
ijkgds1                 ipolates, ipolatev, ipxwafs, ipxwafs2_3
ipolates                ipolates, ipxwafs, ipxwafs2_3, copygb
ipolatev                ipolatev
ipxetas                 ipxetas
ipxwafs                 ipxwafs, ipxwafs2_3
ipxwafs2                ipxwafs2_3, copygb
ipxwafs3                ipxwafs2_3, copygb
makgds                  ipxwafs, ipxwafs2_3, makgds
movect                  ipolatev
polates0                ipolates, ipxwafs, ipxwafs2_3, copygb
polates1                ipolates, copygb
polates2                ipolates, ipxwafs2_3, copygb
polates3                ipolates, copygb
polates4                ipolates, copygb
polates6                ipolates, copygb
polatev0                ipolatev
polatev1                ipolatev
polatev2                ipolatev
polatev3                ipolatev
polatev4                ipolatev
polatev6                ipolatev
polfixs                 ipolates, ipxwafs, ipxwafs2_3
polfixv                 ipolatev
